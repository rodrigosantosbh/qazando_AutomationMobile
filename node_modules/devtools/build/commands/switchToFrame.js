"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const utils_1 = require("../utils");
/**
 * The Switch To Frame command is used to select the current top-level browsing context
 * or a child browsing context of the current browsing context to use as the current
 * browsing context for subsequent commands.
 *
 * @alias browser.switchToFrame
 * @see https://w3c.github.io/webdriver/#dfn-switch-to-frame
 * @param {string|object|null} id  one of three possible types: null: this represents the top-level browsing context (i.e., not an iframe), a Number, representing the index of the window object corresponding to a frame, an Element object received using `findElement`.
 */
async function switchToFrame({ id }) {
    const page = this.getPageHandle(true);
    /**
     * switch to parent frame
     */
    if (id === null && typeof page.parentFrame === 'function') {
        let parentFrame = await page.parentFrame();
        while (parentFrame) {
            parentFrame = await parentFrame.parentFrame();
        }
        this.currentFrame = parentFrame;
        return null;
    }
    /**
     * switch frame by element ID
     */
    const idAsElementReference = id;
    if (typeof idAsElementReference[constants_1.ELEMENT_KEY] === 'string') {
        const elementHandle = await this.elementStore.get(idAsElementReference[constants_1.ELEMENT_KEY]);
        if (!elementHandle) {
            throw utils_1.getStaleElementError(id);
        }
        const contentFrame = await elementHandle.contentFrame();
        if (!contentFrame) {
            throw new Error('no such frame');
        }
        this.currentFrame = contentFrame;
        return null;
    }
    /**
     * switch frame by number
     */
    if (typeof id === 'number') {
        /**
         * `page` has `frames` method while `frame` has `childFrames` method
         */
        let getFrames = page.frames || page.childFrames;
        const childFrames = await getFrames.apply(page);
        const childFrame = childFrames[id];
        if (!childFrame) {
            throw new Error('no such frame');
        }
        this.currentFrame = childFrame;
        return null;
    }
    throw new Error(`Could not switch frame, unknown id: ${id}`);
}
exports.default = switchToFrame;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoVG9GcmFtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9zd2l0Y2hUb0ZyYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEsNENBQTBDO0FBQzFDLG9DQUErQztBQUcvQzs7Ozs7Ozs7R0FRRztBQUNZLEtBQUssVUFBVSxhQUFhLENBRXZDLEVBQUUsRUFBRSxFQUFrQjtJQUV0QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBcUIsQ0FBQTtJQUV6RDs7T0FFRztJQUNILElBQUksRUFBRSxLQUFLLElBQUksSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVSxFQUFFO1FBQ3ZELElBQUksV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQzFDLE9BQU8sV0FBVyxFQUFFO1lBQ2hCLFdBQVcsR0FBRyxNQUFNLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtTQUNoRDtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBOEIsQ0FBQTtRQUNsRCxPQUFPLElBQUksQ0FBQTtLQUNkO0lBRUQ7O09BRUc7SUFDSCxNQUFNLG9CQUFvQixHQUFHLEVBQWlDLENBQUE7SUFDOUQsSUFBSSxPQUFPLG9CQUFvQixDQUFDLHVCQUFXLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDdkQsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyx1QkFBVyxDQUFDLENBQUMsQ0FBQTtRQUVwRixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2hCLE1BQU0sNEJBQW9CLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDakM7UUFFRCxNQUFNLFlBQVksR0FBRyxNQUFNLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUV2RCxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQTtTQUNuQztRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBK0IsQ0FBQTtRQUNuRCxPQUFPLElBQUksQ0FBQTtLQUNkO0lBRUQ7O09BRUc7SUFDSCxJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRTtRQUN4Qjs7V0FFRztRQUNILElBQUksU0FBUyxHQUFJLElBQXdCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUE7UUFDcEUsTUFBTSxXQUFXLEdBQUcsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9DLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVsQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQTtTQUNuQztRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBNkIsQ0FBQTtRQUNqRCxPQUFPLElBQUksQ0FBQTtLQUNkO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNoRSxDQUFDO0FBM0RELGdDQTJEQyJ9