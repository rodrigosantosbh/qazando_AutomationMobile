"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const USKeyboardLayout_1 = require("puppeteer-core/lib/cjs/puppeteer/common/USKeyboardLayout");
const getElementRect_1 = __importDefault(require("./getElementRect"));
const constants_1 = require("../constants");
const KEY = 'key';
const POINTER = 'pointer';
const sleep = (time = 0) => new Promise((resolve) => setTimeout(resolve, time));
/**
 * The Perform Actions command is used to execute complex user actions.
 * See [spec](https://github.com/jlipps/simple-wd-spec#perform-actions) for more details.
 *
 * @alias browser.performActions
 * @see https://w3c.github.io/webdriver/#dfn-perform-actions
 * @param {object[]} actions  A list of objects, each of which represents an input source and its associated actions.
 */
async function performActions({ actions }) {
    const page = this.getPageHandle();
    const lastPointer = {};
    /**
     * see https://github.com/jlipps/simple-wd-spec#input-sources-and-corresponding-actions
     * for details on the `actions` format
     */
    for (const action of actions) {
        if (action.type === null || action.type === 'null') {
            for (const singleAction of action.actions) {
                await sleep(singleAction.duration);
            }
            continue;
        }
        if (action.type === 'key') {
            const skipChars = [];
            for (const singleAction of action.actions) {
                if (singleAction.type === 'pause') {
                    await sleep(singleAction.duration);
                    continue;
                }
                const cmd = singleAction.type.slice(KEY.length).toLowerCase();
                const keyboardFn = page.keyboard[cmd].bind(page.keyboard);
                /**
                 * skip up event as we had to use sendCharacter for non unicode
                 * characters which includes the up event already
                 */
                if (cmd === 'up' && skipChars[0] === singleAction.value) {
                    skipChars.shift();
                    continue;
                }
                /**
                 * for special characters like emojis ðŸ˜‰ we need to
                 * send in the value as text because it is not unicode
                 */
                if (!USKeyboardLayout_1.keyDefinitions[singleAction.value]) {
                    await page.keyboard.sendCharacter(singleAction.value);
                    skipChars.push(singleAction.value);
                    continue;
                }
                await keyboardFn(singleAction.value);
                continue;
            }
            continue;
        }
        if (action.type === 'pointer') {
            if (action.parameters && action.parameters.pointerType && action.parameters.pointerType !== 'mouse') {
                throw new Error('Currently only "mouse" is supported as pointer type');
            }
            for (const singleAction of action.actions) {
                if (singleAction.type === 'pause') {
                    await sleep(singleAction.duration);
                    continue;
                }
                const cmd = singleAction.type.slice(POINTER.length).toLowerCase();
                const keyboardFn = page.mouse[cmd].bind(page.mouse);
                let { x, y, duration, button, origin } = singleAction;
                if (cmd === 'move') {
                    /**
                     * set location relative from last position if origin is set to pointer
                     */
                    if (typeof x === 'number' &&
                        typeof y === 'number' &&
                        origin === 'pointer' &&
                        lastPointer.x && lastPointer.y) {
                        x += lastPointer.x;
                        y += lastPointer.y;
                    }
                    /**
                     * set location relative from an element
                     */
                    if (origin && typeof origin[constants_1.ELEMENT_KEY] === 'string' && typeof x === 'number' && typeof y === 'number') {
                        const elemRect = await getElementRect_1.default.call(this, { elementId: origin[constants_1.ELEMENT_KEY] });
                        x += elemRect.x + (elemRect.width / 2);
                        y += elemRect.y + (elemRect.height / 2);
                    }
                    lastPointer.x = x;
                    lastPointer.y = y;
                    await keyboardFn(x, y, { steps: 10 });
                    continue;
                }
                else {
                    /**
                     * "left" is default button
                     * "1": middle, "2": right
                     */
                    const pptrButton = (button === 1 ? 'middle' : (button === 2 ? 'right' : 'left'));
                    await keyboardFn({ button: pptrButton });
                }
                if (duration) {
                    await sleep(duration);
                }
                continue;
            }
            continue;
        }
        throw new Error(`Unknown action type ("${action.type}"), allowed are only: null, key and pointer`);
    }
}
exports.default = performActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybUFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvcGVyZm9ybUFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrRkFBbUc7QUFHbkcsc0VBQTZDO0FBQzdDLDRDQUEwQztBQUcxQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUE7QUFDakIsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFBO0FBRXpCLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQ25DLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7QUFvQjNDOzs7Ozs7O0dBT0c7QUFDWSxLQUFLLFVBQVUsY0FBYyxDQUV4QyxFQUFFLE9BQU8sRUFBbUM7SUFFNUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ2pDLE1BQU0sV0FBVyxHQUdiLEVBQUUsQ0FBQTtJQUVOOzs7T0FHRztJQUNILEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7WUFDaEQsS0FBSyxNQUFNLFlBQVksSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUN2QyxNQUFNLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUE7YUFDckM7WUFDRCxTQUFRO1NBQ1g7UUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ3ZCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQTtZQUNwQixLQUFLLE1BQU0sWUFBWSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0JBQ3ZDLElBQUksWUFBWSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7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