"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
/**
 * The Element Send Keys command scrolls into view the form control element and then sends
 * the provided keys to the element. In case the element is not keyboard-interactable,
 * an element not interactable error is returned. The key input state used for input
 * may be cleared mid-way through "typing" by sending the null key, which is U+E000 (NULL)
 *
 * @alias browser.elementSendKeys
 * @see https://w3c.github.io/webdriver/#dfn-element-send-keys
 * @param {string} elementId  the id of an element returned in a previous call to Find Element(s)
 * @param {string} text       string to send as keystrokes to the element
 */
async function elementSendKeys({ elementId, text }) {
    var _a, _b;
    const elementHandle = await this.elementStore.get(elementId);
    if (!elementHandle) {
        throw utils_1.getStaleElementError(elementId);
    }
    await elementHandle.focus();
    const page = this.getPageHandle();
    const propertyHandles = {
        tagName: await elementHandle.getProperty('tagName'),
        type: await elementHandle.getProperty('type')
    };
    const tagName = await ((_a = propertyHandles.tagName) === null || _a === void 0 ? void 0 : _a.jsonValue());
    const type = await ((_b = propertyHandles.type) === null || _b === void 0 ? void 0 : _b.jsonValue());
    if (tagName === 'INPUT' && type === 'file') {
        const paths = (text || '').split('\n').map(p => path_1.default.resolve(p));
        await elementHandle.uploadFile(...paths);
    }
    else {
        await page.keyboard.type(text);
    }
    return null;
}
exports.default = elementSendKeys;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudFNlbmRLZXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1hbmRzL2VsZW1lbnRTZW5kS2V5cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF1QjtBQUV2QixvQ0FBK0M7QUFHL0M7Ozs7Ozs7Ozs7R0FVRztBQUNZLEtBQUssVUFBVSxlQUFlLENBRXpDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBdUM7O0lBRXhELE1BQU0sYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFNUQsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNoQixNQUFNLDRCQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFBO0tBQ3hDO0lBRUQsTUFBTSxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDM0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ2pDLE1BQU0sZUFBZSxHQUFHO1FBQ3BCLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ25ELElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO0tBQ2hELENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRyxhQUFNLGVBQWUsQ0FBQyxPQUFPLDBDQUFFLFNBQVMsR0FBdUIsQ0FBQTtJQUMvRSxNQUFNLElBQUksR0FBRyxhQUFNLGVBQWUsQ0FBQyxJQUFJLDBDQUFFLFNBQVMsR0FBdUIsQ0FBQTtJQUN6RSxJQUFJLE9BQU8sS0FBSyxPQUFPLElBQUksSUFBSSxLQUFLLE1BQU0sRUFBRTtRQUN4QyxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2hFLE1BQU0sYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFBO0tBQzNDO1NBQU07UUFDSCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ2pDO0lBRUQsT0FBTyxJQUFJLENBQUE7QUFDZixDQUFDO0FBM0JELGtDQTJCQyJ9