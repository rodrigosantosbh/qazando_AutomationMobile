"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiRemoteDriver = void 0;
const lodash_zip_1 = __importDefault(require("lodash.zip"));
const lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
const utils_1 = require("@wdio/utils");
const middlewares_1 = require("./middlewares");
const utils_2 = require("./utils");
/**
 * Multiremote class
 */
class MultiRemote {
    constructor() {
        this.instances = {};
    }
    /**
     * add instance to multibrowser instance
     */
    async addInstance(browserName, client) {
        this.instances[browserName] = await client;
        return this.instances[browserName];
    }
    /**
     * modifier for multibrowser instance
     */
    modifier(wrapperClient) {
        const propertiesObject = {};
        propertiesObject.commandList = { value: wrapperClient.commandList };
        propertiesObject.options = { value: wrapperClient.options };
        for (const commandName of wrapperClient.commandList) {
            propertiesObject[commandName] = {
                value: this.commandWrapper(commandName),
                configurable: true
            };
        }
        propertiesObject['__propertiesObject__'] = {
            value: propertiesObject
        };
        this.baseInstance = new MultiRemoteDriver(this.instances, propertiesObject);
        const client = Object.create(this.baseInstance, propertiesObject);
        /**
         * attach instances to wrapper client
         */
        for (const [identifier, instance] of Object.entries(this.instances)) {
            client[identifier] = instance;
        }
        return client;
    }
    /**
     * helper method to generate element objects from results, so that we can call, e.g.
     *
     * ```
     * const elem = $('#elem')
     * elem.getHTML()
     * ```
     *
     * or in case multiremote is used
     *
     * ```
     * const elems = $$('div')
     * elems[0].getHTML()
     * ```
     */
    static elementWrapper(instances, result, propertiesObject) {
        const prototype = { ...propertiesObject, ...lodash_clonedeep_1.default(utils_2.getPrototype('element')), scope: { value: 'element' } };
        const element = utils_1.webdriverMonad({}, (client) => {
            /**
             * attach instances to wrapper client
             */
            for (const [i, identifier] of Object.entries(Object.keys(instances))) {
                client[identifier] = result[i];
            }
            client.instances = Object.keys(instances);
            delete client.sessionId;
            return client;
        }, prototype);
        // @ts-ignore
        return element(this.sessionId, middlewares_1.multiremoteHandler(utils_1.wrapCommand));
    }
    /**
     * handle commands for multiremote instances
     */
    commandWrapper(commandName) {
        const instances = this.instances;
        return utils_1.wrapCommand(commandName, async function (...args) {
            const result = await Promise.all(
            // @ts-ignore
            Object.entries(instances).map(([, instance]) => instance[commandName](...args)));
            /**
             * return element object to call commands directly
             */
            if (commandName === '$') {
                return MultiRemote.elementWrapper(instances, result, this.__propertiesObject__);
            }
            else if (commandName === '$$') {
                const zippedResult = lodash_zip_1.default(...result);
                return zippedResult.map((singleResult) => MultiRemote.elementWrapper(instances, singleResult, this.__propertiesObject__));
            }
            return result;
        });
    }
}
exports.default = MultiRemote;
/**
 * event listener class that propagates events to sub drivers
 */
/* istanbul ignore next */
class MultiRemoteDriver {
    constructor(instances, propertiesObject) {
        this.isMultiremote = true;
        this.instances = Object.keys(instances);
        this.__propertiesObject__ = propertiesObject;
    }
    on(eventName, emitter) {
        this.instances.forEach((instanceName) => this[instanceName].on(eventName, emitter));
        return undefined;
    }
    once(eventName, emitter) {
        this.instances.forEach((instanceName) => this[instanceName].once(eventName, emitter));
        return undefined;
    }
    emit(eventName, emitter) {
        return this.instances.map((instanceName) => this[instanceName].emit(eventName, emitter)).some(Boolean);
    }
    eventNames() {
        return this.instances.map((instanceName) => this[instanceName].eventNames()); // special behavior of event methods for multiremote
    }
    getMaxListeners() {
        return this.instances.map((instanceName) => this[instanceName].getMaxListeners()); // special behavior of event methods for multiremote
    }
    listenerCount(eventName) {
        return this.instances.map((instanceName) => this[instanceName].listenerCount(eventName)); // special behavior of event methods for multiremote
    }
    listeners(eventName) {
        return this.instances.map((instanceName) => this[instanceName].listeners(eventName)).reduce((prev, cur) => {
            prev.concat(cur);
            return prev;
        }, []);
    }
    removeListener(eventName, emitter) {
        this.instances.forEach((instanceName) => this[instanceName].removeListener(eventName, emitter));
        return undefined;
    }
    removeAllListeners(eventName) {
        this.instances.forEach((instanceName) => this[instanceName].removeAllListeners(eventName));
        return undefined;
    }
}
exports.MultiRemoteDriver = MultiRemoteDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlyZW1vdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbXVsdGlyZW1vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNERBQTRCO0FBQzVCLHdFQUFvQztBQUNwQyx1Q0FBeUQ7QUFJekQsK0NBQWtEO0FBQ2xELG1DQUFzQztBQUt0Qzs7R0FFRztBQUNILE1BQXFCLFdBQVc7SUFBaEM7UUFDSSxjQUFTLEdBQXdDLEVBQUUsQ0FBQTtJQTJHdkQsQ0FBQztJQXZHRzs7T0FFRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUUsV0FBbUIsRUFBRSxNQUFXO1FBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxNQUE2QixDQUFBO1FBQ2pFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRLENBQUUsYUFBZ0g7UUFDdEgsTUFBTSxnQkFBZ0IsR0FBdUMsRUFBRSxDQUFBO1FBQy9ELGdCQUFnQixDQUFDLFdBQVcsR0FBRyxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDbkUsZ0JBQWdCLENBQUMsT0FBTyxHQUFHLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUUzRCxLQUFLLE1BQU0sV0FBVyxJQUFJLGFBQWEsQ0FBQyxXQUFXLEVBQUU7WUFDakQsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEdBQUc7Z0JBQzVCLEtBQUssRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQztnQkFDdkMsWUFBWSxFQUFFLElBQUk7YUFDckIsQ0FBQTtTQUNKO1FBRUQsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsR0FBRztZQUN2QyxLQUFLLEVBQUUsZ0JBQWdCO1NBQzFCLENBQUE7UUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksaUJBQWlCLENBQUMsSUFB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