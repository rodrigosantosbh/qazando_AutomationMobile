"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_core_1 = __importDefault(require("puppeteer-core"));
const constants_1 = require("../../constants");
/**
 * Get the [Puppeteer Browser instance](https://pptr.dev/#?product=Puppeteer&version=v5.1.0&show=api-class-browser)
 * to run commands with Puppeteer. Note that all Puppeteer commands are
 * asynchronous by default so in order to interchange between sync and async
 * execution make sure to wrap your Puppeteer calls within a `browser.call`
 * commands as shown in the example.
 *
 * :::info
 *
 * Note that using Puppeteer requires support for Chrome DevTools protocol and e.g.
 * can not be used when running automated tests in the cloud. Find out more in the
 * [Automation Protocols](/docs/automationProtocols) section.
 *
 * :::
 *
 * <example>
    :getPuppeteer.test.js
    it('should allow me to use Puppeteer', () => {
        // WebDriver command
        browser.url('https://webdriver.io')

        const puppeteerBrowser = browser.getPuppeteer()
        // switch to Puppeteer
        const metrics = browser.call(async () => {
            await pages = await puppeteerBrowser.pages()
            pages[0].setGeolocation({ latitude: 59.95, longitude: 30.31667 })
            return pages[0].metrics()
        })

        console.log(metrics.LayoutCount) // returns 42
    })
 * </example>
 *
 * @return {PuppeteerBrowser}  initiated puppeteer instance connected to the browser
 */
async function getPuppeteer() {
    var _a, _b, _c;
    /**
     * check if we already connected Puppeteer and if so return
     * that instance
     */
    if (this.puppeteer) {
        return this.puppeteer;
    }
    const caps = this.capabilities.alwaysMatch || this.capabilities;
    /**
     * attach to a Selenium 4 CDP Session if it's returned in the capabilities
     */
    const cdpEndpoint = caps['se:cdp'];
    if (cdpEndpoint) {
        this.puppeteer = await puppeteer_core_1.default.connect({
            browserWSEndpoint: cdpEndpoint,
            // @ts-ignore ToDo(@L0tso): remove once https://github.com/puppeteer/puppeteer/pull/6942 is merged
            defaultViewport: null
        });
        return this.puppeteer;
    }
    /**
     * attach to Chromium debugger session
     */
    const chromiumOptions = caps['goog:chromeOptions'] || caps['ms:edgeOptions'];
    if (chromiumOptions && chromiumOptions.debuggerAddress) {
        this.puppeteer = await puppeteer_core_1.default.connect({
            browserURL: `http://${chromiumOptions.debuggerAddress}`,
            // @ts-ignore ToDo(@L0tso): remove once https://github.com/puppeteer/puppeteer/pull/6942 is merged
            defaultViewport: null
        });
        return this.puppeteer;
    }
    /**
     * attach to Firefox debugger session
     */
    if (((_a = caps.browserName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'firefox') {
        if (!caps.browserVersion) {
            throw new Error('Can\'t find "browserVersion" in capabilities');
        }
        const majorVersion = parseInt(caps.browserVersion.split('.').shift() || '', 10);
        if (majorVersion >= 79) {
            const reqCaps = this.requestedCapabilities.alwaysMatch || this.requestedCapabilities;
            const ffOptions = caps['moz:firefoxOptions'];
            const ffArgs = (_b = reqCaps['moz:firefoxOptions']) === null || _b === void 0 ? void 0 : _b.args;
            const rdPort = ffOptions && ffOptions.debuggerAddress
                ? ffOptions.debuggerAddress
                : (_c = ffArgs === null || ffArgs === void 0 ? void 0 : ffArgs[ffArgs.findIndex((arg) => arg === constants_1.FF_REMOTE_DEBUG_ARG) + 1]) !== null && _c !== void 0 ? _c : null;
            if (!rdPort) {
                throw new Error('Could\'t find remote debug port in Firefox options');
            }
            this.puppeteer = await puppeteer_core_1.default.connect({
                browserURL: `http://localhost:${rdPort}`,
                // @ts-ignore ToDo(@L0tso): remove once https://github.com/puppeteer/puppeteer/pull/6942 is merged
                defaultViewport: null
            });
            return this.puppeteer;
        }
    }
    throw new Error('Using DevTools capabilities is not supported for this session. ' +
        'This feature is only supported for local testing on Chrome, Firefox and Chromium Edge.');
}
exports.default = getPuppeteer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHVwcGV0ZWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2Jyb3dzZXIvZ2V0UHVwcGV0ZWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0VBQXNDO0FBSXRDLCtDQUFxRDtBQUVyRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtDRztBQUNZLEtBQUssVUFBVSxZQUFZOztJQUN0Qzs7O09BR0c7SUFDSCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFBO0tBQ3hCO0lBRUQsTUFBTSxJQUFJLEdBQUksSUFBSSxDQUFDLFlBQTZDLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxZQUFnRCxDQUFBO0lBQ3JJOztPQUVHO0lBQ0gsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2xDLElBQUksV0FBVyxFQUFFO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFDO1lBQ3JDLGlCQUFpQixFQUFFLFdBQVc7WUFDOUIsa0dBQWtHO1lBQ2xHLGVBQWUsRUFBRSxJQUFJO1NBQ3hCLENBQTRCLENBQUE7UUFDN0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFBO0tBQ3hCO0lBRUQ7O09BRUc7SUFDSCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUM1RSxJQUFJLGVBQWUsSUFBSSxlQUFlLENBQUMsZUFBZSxFQUFFO1FBQ3BELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQztZQUNyQyxVQUFVLEVBQUUsVUFBVSxlQUFlLENBQUMsZUFBZSxFQUFFO1lBQ3ZELGtHQUFrRztZQUNsRyxlQUFlLEVBQUUsSUFBSTtTQUN4QixDQUE0QixDQUFBO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtLQUN4QjtJQUVEOztPQUVHO0lBQ0gsSUFBSSxPQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLFdBQVcsUUFBTyxTQUFTLEVBQUU7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFBO1NBQ2xFO1FBRUQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUMvRSxJQUFJLFlBQVksSUFBSSxFQUFFLEVBQUU7WUFDcEIsTUFBTSxPQUFPLEdBQUksSUFBSSxDQUFDLHFCQUFzRCxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMscUJBQXlELENBQUE7WUFDMUosTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUE7WUFDNUMsTUFBTSxNQUFNLFNBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLDBDQUFFLElBQUksQ0FBQTtZQUVsRCxNQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLGVBQWU7Z0JBQ2pELENBQUMsQ0FBQyxTQUFTLENBQUMsZUFBZTtnQkFDM0IsQ0FBQyxPQUFDLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssK0JBQW1CLENBQUMsR0FBRyxDQUFDLG9DQUFLLElBQUksQ0FBQTtZQUUxRixJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQTthQUN4RTtZQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQztnQkFDckMsVUFBVSxFQUFFLG9CQUFvQixNQUFNLEVBQUU7Z0JBQ3hDLGtHQUFrRztnQkFDbEcsZUFBZSxFQUFFLElBQUk7YUFDeEIsQ0FBNEIsQ0FBQTtZQUM3QixPQUFPLElBQUksQ0FBQyxTQUFvQyxDQUFBO1NBQ25EO0tBQ0o7SUFFRCxNQUFNLElBQUksS0FBSyxDQUNYLGlFQUFpRTtRQUNqRSx3RkFBd0YsQ0FDM0YsQ0FBQTtBQUNMLENBQUM7QUF2RUQsK0JBdUVDIn0=