"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("@wdio/logger"));
const log = logger_1.default('webdriverio');
/**
 *
 * Creates a new Selenium session with your current capabilities. This is useful if you
 * test highly stateful application where you need to clean the browser session between
 * the tests in your spec file to avoid creating hundreds of single test files with WDIO.
 * Be careful though, this command affects your test time tremendously since spawning
 * new Selenium sessions is very time consuming especially when using cloud services.
 *
 * <example>
    :reloadSync.js
    it('should reload my session with current capabilities', () => {
        console.log(browser.sessionId) // outputs: e042b3f3cd5a479da4e171825e96e655
        browser.reloadSession()
        console.log(browser.sessionId) // outputs: 9a0d9bf9d4864160aa982c50cf18a573
    })
 * </example>
 *
 * @alias browser.reloadSession
 * @type utility
 *
 */
async function reloadSession() {
    const oldSessionId = this.sessionId;
    /**
     * end current running session, if session already gone suppress exceptions
     */
    try {
        await this.deleteSession();
    }
    catch (err) {
        /**
         * ignoring all exceptions that could be caused by browser.deleteSession()
         * there maybe times where session is ended remotely, browser.deleteSession() will fail in this case)
         * this can be worked around in code but requires a lot of overhead
         */
        log.warn(`Suppressing error closing the session: ${err.stack}`);
    }
    const ProtocolDriver = require(this.options.automationProtocol).default;
    await ProtocolDriver.reloadSession(this);
    const options = this.options;
    if (Array.isArray(options.onReload) && options.onReload.length) {
        await Promise.all(options.onReload.map((hook) => hook(oldSessionId, this.sessionId)));
    }
    return this.sessionId;
}
exports.default = reloadSession;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsb2FkU2Vzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL3JlbG9hZFNlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBaUM7QUFHakMsTUFBTSxHQUFHLEdBQUcsZ0JBQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUVqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFDWSxLQUFLLFVBQVUsYUFBYTtJQUN2QyxNQUFNLFlBQVksR0FBSSxJQUE0QixDQUFDLFNBQVMsQ0FBQTtJQUU1RDs7T0FFRztJQUNILElBQUk7UUFDQSxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtLQUM3QjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1Y7Ozs7V0FJRztRQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsMENBQTBDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0tBQ2xFO0lBRUQsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUE7SUFDeEUsTUFBTSxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBRXhDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUE2QixDQUFBO0lBQ2xELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7UUFDNUQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFHLElBQTRCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2pIO0lBRUQsT0FBTyxJQUFJLENBQUMsU0FBbUIsQ0FBQTtBQUNuQyxDQUFDO0FBMUJELGdDQTBCQyJ9