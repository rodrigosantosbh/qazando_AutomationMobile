"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const devtools_1 = __importDefault(require("../../utils/interception/devtools"));
const webdriver_1 = __importDefault(require("../../utils/interception/webdriver"));
const utils_1 = require("../../utils");
const SESSION_MOCKS = {};
/**
 * Mock the response of a request. You can define a mock based on a matching
 * glob and corresponding header and status code. Calling the mock method
 * returns a stub object that you can use to modify the response of the
 * web resource.
 *
 * With the stub object you can then either return a custom response or
 * have the request fail.
 *
 * There are 3 ways to modify the response:
 * - return a custom JSON object (for stubbing API request)
 * - replace web resource with a local file (service a modified JavaScript file) or
 * - redirect resource to a different url
 *
 * :::info
 *
 * Note that using the `mock` command requires support for Chrome DevTools protocol and e.g.
 * can not be used when running automated tests in the cloud. Find out more in the
 * [Automation Protocols](/docs/automationProtocols) section.
 *
 * :::
 *
 * <example>
    :mock.js
    it('should mock network resources', () => {
        // via static string
        const userListMock = browser.mock('**' + '/users/list')
        // you can also specifying the mock even more by filtering resources
        // by request or response headers, status code, postData, e.g. mock only responses with specific
        // header set and statusCode
        const strictMock = browser.mock('**', {
            // mock all json responses
            statusCode: 200,
            headers: { 'Content-Type': 'application/json' },
            responseHeaders: { 'Cache-Control': 'no-cache' },
            postData: 'foobar'
        })

        // comparator function
        const apiV1Mock = browser.mock('**' + '/api/v1', {
            statusCode: (statusCode) => statusCode >= 200 && statusCode <= 203,
            headers: (headers) => headers['Authorization'] && headers['Authorization'].startsWith('Bearer '),
            responseHeaders: (headers) => headers['Impersonation'],
            postData: (data) => typeof data === 'string' && data.includes('foo')
        })
    })

    it('should modify API responses', () => {
        // filter by method
        const todoMock = browser.mock('**' + '/todos', {
            method: 'get'
        })

        // mock an endpoint with a fixed fixture
        mock.respond([{
            title: 'Injected Todo',
            order: null,
            completed: false,
            url: "http://todo-backend-express-knex.herokuapp.com/916"
        }])

        // respond with different status code or header
        mock.respond([{
            title: 'Injected Todo',
            order: null,
            completed: false,
            url: "http://todo-backend-express-knex.herokuapp.com/916"
        }], {
            statusCode: 404,
            headers: {
                'x-custom-header': 'foobar'
            }
        })
    })

    it('should modify text assets', () => {
        const scriptMock = browser.mock('**' + '/script.min.js')
        scriptMock.respond('./tests/fixtures/script.js')
    })

    it('should redirect web resources', () => {
        const headerMock = browser.mock('**' + '/header.png')
        headerMock.respond('https://media.giphy.com/media/F9hQLAVhWnL56/giphy.gif')

        const pageMock = browser.mock('https://google.com/')
        pageMock.respond('https://webdriver.io')
        browser.url('https://google.com')
        console.log(browser.getTitle()) // returns "WebdriverIO Â· Next-gen browser and mobile automation test framework for Node.js"
    })
 * </example>
 *
 * @alias browser.mock
 * @param {String}              url                             url to mock
 * @param {MockFilterOptions=}  filterOptions                   filter mock resource by additional options
 * @param {String|Function=}    filterOptions.method            filter resource by HTTP method
 * @param {Object|Function=}    filterOptions.headers           filter resource by specific request headers
 * @param {Object|Function=}    filterOptions.responseHeaders   filter resource by specific response headers
 * @param {String|Function=}    filterOptions.postData          filter resource by request postData
 * @param {Number|Function=}    filterOptions.statusCode        filter resource by response statusCode
 * @return {Mock}                                               a mock object to modify the response
 * @type utility
 *
 */
async function mock(url, filterOptions) {
    const NetworkInterception = this.isSauce ? webdriver_1.default : devtools_1.default;
    if (!this.isSauce) {
        await this.getPuppeteer();
    }
    if (!this.puppeteer) {
        throw new Error('No Puppeteer connection could be established which is required to use this command');
    }
    const browser = utils_1.getBrowserObject(this);
    const handle = await browser.getWindowHandle();
    if (!SESSION_MOCKS[handle]) {
        SESSION_MOCKS[handle] = new Set();
    }
    /**
     * enable network Mocking if not already
     */
    if (SESSION_MOCKS[handle].size === 0 && !this.isSauce) {
        const pages = await this.puppeteer.pages();
        /**
         * get active page
         */
        let page;
        for (let i = 0; i < pages.length && !page; i++) {
            const isHidden = await pages[i].evaluate(() => document.hidden);
            if (!isHidden) {
                page = pages[i];
            }
        }
        /**
         * fallback to the first page
         */
        if (!page) {
            page = pages[0];
        }
        const client = await page.target().createCDPSession();
        await client.send('Fetch.enable', {
            patterns: [{ requestStage: 'Request' }, { requestStage: 'Response' }]
        });
        client.on('Fetch.requestPaused', NetworkInterception
            .handleRequestInterception(client, SESSION_MOCKS[handle]));
    }
    const networkInterception = new NetworkInterception(url, filterOptions, browser);
    SESSION_MOCKS[handle].add(networkInterception);
    if (this.isSauce) {
        await networkInterception.init();
    }
    return networkInterception;
}
exports.default = mock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL21vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxpRkFBMkU7QUFDM0UsbUZBQTZFO0FBQzdFLHVDQUE4QztBQUk5QyxNQUFNLGFBQWEsR0FBc0MsRUFBRSxDQUFBO0FBRTNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzR0c7QUFDWSxLQUFLLFVBQVUsSUFBSSxDQUU5QixHQUFXLEVBQ1gsYUFBaUM7SUFFakMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxtQkFBNEIsQ0FBQyxDQUFDLENBQUMsa0JBQTJCLENBQUE7SUFFckcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDZixNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtLQUM1QjtJQUVELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0ZBQW9GLENBQUMsQ0FBQTtLQUN4RztJQUVELE1BQU0sT0FBTyxHQUFHLHdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFBO0lBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDeEIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7S0FDcEM7SUFFRDs7T0FFRztJQUNILElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ25ELE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUUxQzs7V0FFRztRQUNILElBQUksSUFBSSxDQUFBO1FBQ1IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUMvRCxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNYLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDbEI7U0FDSjtRQUVEOztXQUVHO1FBQ0gsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDbEI7UUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO1FBQ3JELE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDOUIsUUFBUSxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLENBQUM7U0FDeEUsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxDQUFDLEVBQUUsQ0FDTCxxQkFBcUIsRUFDcEIsbUJBQXFFO2FBQ2pFLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDaEUsQ0FBQTtLQUNKO0lBRUQsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDaEYsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUMsQ0FBQyxDQUFBO0lBRTlELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNkLE1BQU8sbUJBQW9ELENBQUMsSUFBSSxFQUFFLENBQUE7S0FDckU7SUFFRCxPQUFPLG1CQUEyQixDQUFBO0FBQ3RDLENBQUM7QUFoRUQsdUJBZ0VDIn0=