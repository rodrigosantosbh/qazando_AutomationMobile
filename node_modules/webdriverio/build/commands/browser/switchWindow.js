"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * Switch focus to a particular tab / window.
 *
 * <example>
    :switchWindow.js
    it('should switch to another window', () => {
        // open url
        browser.url('https://google.com')
        // create new window
        browser.newWindow('https://webdriver.io')

        // switch back via url match
        browser.switchWindow('google.com')

        // switch back via title match
        browser.switchWindow('Next-gen browser and mobile automation test framework for Node.js')
    });
 * </example>
 *
 * @param {String|RegExp}  urlOrTitleToMatch  String or regular expression that matches the title or url of the page
 *
 * @uses protocol/getWindowHandles, protocol/switchToWindow, protocol/getUrl, protocol/getTitle
 * @alias browser.switchTab
 * @type window
 *
 */
async function switchWindow(urlOrTitleToMatch) {
    /**
     * parameter check
     */
    if (typeof urlOrTitleToMatch !== 'string' && !(urlOrTitleToMatch instanceof RegExp)) {
        throw new Error('Unsupported parameter for switchWindow, required is "string" or an RegExp');
    }
    const tabs = await this.getWindowHandles();
    const matchesTarget = (target) => {
        if (typeof urlOrTitleToMatch === 'string') {
            return target.includes(urlOrTitleToMatch);
        }
        return !!target.match(urlOrTitleToMatch);
    };
    for (const tab of tabs) {
        await this.switchToWindow(tab);
        /**
         * check if url matches
         */
        const url = await this.getUrl();
        if (matchesTarget(url)) {
            return tab;
        }
        /**
         * check title
         */
        const title = await this.getTitle();
        if (matchesTarget(title)) {
            return tab;
        }
    }
    throw new Error(`No window found with title or url matching "${urlOrTitleToMatch}"`);
}
exports.default = switchWindow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoV2luZG93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2Jyb3dzZXIvc3dpdGNoV2luZG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMEJHO0FBQ1ksS0FBSyxVQUFVLFlBQVksQ0FFdEMsaUJBQWtDO0lBRWxDOztPQUVHO0lBQ0gsSUFBSSxPQUFPLGlCQUFpQixLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsaUJBQWlCLFlBQVksTUFBTSxDQUFDLEVBQUU7UUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQywyRUFBMkUsQ0FBQyxDQUFBO0tBQy9GO0lBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtJQUUxQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQWMsRUFBVyxFQUFFO1FBQzlDLElBQUksT0FBTyxpQkFBaUIsS0FBSSxRQUFRLEVBQUU7WUFDdEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUE7U0FDNUM7UUFDRCxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDNUMsQ0FBQyxDQUFBO0lBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDcEIsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTlCOztXQUVHO1FBQ0gsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDL0IsSUFBSSxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxHQUFHLENBQUE7U0FDYjtRQUVEOztXQUVHO1FBQ0gsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDbkMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxHQUFHLENBQUE7U0FDYjtLQUNKO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsaUJBQWlCLEdBQUcsQ0FBQyxDQUFBO0FBQ3hGLENBQUM7QUF6Q0QsK0JBeUNDIn0=