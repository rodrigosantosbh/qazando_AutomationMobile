"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
const isElementDisplayed_1 = __importDefault(require("../../scripts/isElementDisplayed"));
const noW3CEndpoint = ['microsoftedge', 'safari', 'chrome', 'safari technology preview'];
/**
 *
 * Return true if the selected DOM-element is displayed.
 *
 * <example>
    :index.html
    <div id="notDisplayed" style="display: none"></div>
    <div id="notVisible" style="visibility: hidden"></div>
    <div id="notInViewport" style="position:absolute; left: 9999999"></div>
    <div id="zeroOpacity" style="opacity: 0"></div>
    :isDisplayed.js
    it('should detect if an element is displayed', () => {
        let elem = $('#notDisplayed');
        let isDisplayed = elem.isDisplayed();
        console.log(isDisplayed); // outputs: false

        elem = $('#notVisible');

        isDisplayed = elem.isDisplayed();
        console.log(isDisplayed); // outputs: false

        elem = $('#notExisting');
        isDisplayed = elem.isDisplayed();
        console.log(isDisplayed); // outputs: false

        elem = $('#notInViewport');
        isDisplayed = elem.isDisplayed();
        console.log(isDisplayed); // outputs: true

        elem = $('#zeroOpacity');
        isDisplayed = elem.isDisplayed();
        console.log(isDisplayed); // outputs: true
    });
 * </example>
 *
 * @alias element.isDisplayed
 * @return {Boolean} true if element is displayed
 * @uses protocol/elements, protocol/elementIdDisplayed
 * @type state
 *
 */
async function isDisplayed() {
    var _a;
    const browser = utils_1.getBrowserObject(this);
    if (!await utils_1.hasElementId(this)) {
        return false;
    }
    /*
     * https://www.w3.org/TR/webdriver/#element-displayedness
     * Certain drivers have decided to remove the endpoint as the spec
     * no longer dictates it. In those instances, we pass the element through a script
     * that was provided by Brian Burg, maintainer of Safaridriver.
     *
     * 6th of May 2019 APPIUM response (mykola-mokhnach) :
     * - Appium didn't enable W3C mode for mobile drivers.
     * - Safari and Chrome work in jsonwp mode and Appium just rewrites W3C requests from upstream to jsonwp if needed
     */
    const useAtom = (browser.isDevTools ||
        (browser.isW3C &&
            !browser.isMobile &&
            noW3CEndpoint.includes((_a = browser.capabilities.browserName) === null || _a === void 0 ? void 0 : _a.toLowerCase())));
    return useAtom
        ? await browser.execute(isElementDisplayed_1.default, {
            [constants_1.ELEMENT_KEY]: this.elementId,
            ELEMENT: this.elementId // jsonwp compatible
        }) :
        await this.isElementDisplayed(this.elementId);
}
exports.default = isDisplayed;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNEaXNwbGF5ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvZWxlbWVudC9pc0Rpc3BsYXllZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLCtDQUE2QztBQUM3Qyx1Q0FBNEQ7QUFDNUQsMEZBQXVFO0FBRXZFLE1BQU0sYUFBYSxHQUFHLENBQUMsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsMkJBQTJCLENBQUMsQ0FBQTtBQUV4Rjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdDRztBQUNZLEtBQUssVUFBVSxXQUFXOztJQUNyQyxNQUFNLE9BQU8sR0FBRyx3QkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0QyxJQUFJLENBQUMsTUFBTSxvQkFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzNCLE9BQU8sS0FBSyxDQUFBO0tBQ2Y7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSCxNQUFNLE9BQU8sR0FBRyxDQUNaLE9BQU8sQ0FBQyxVQUFVO1FBQ2xCLENBQ0ksT0FBTyxDQUFDLEtBQUs7WUFDYixDQUFDLE9BQU8sQ0FBQyxRQUFRO1lBQ2pCLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBQyxPQUFPLENBQUMsWUFBMEMsQ0FBQyxXQUFXLDBDQUFFLFdBQVcsRUFBRyxDQUFDLENBQzFHLENBQ0osQ0FBQTtJQUVELE9BQU8sT0FBTztRQUNWLENBQUMsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsNEJBQXdCLEVBQUU7WUFDOUMsQ0FBQyx1QkFBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDN0IsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CO1NBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUNyRCxDQUFDO0FBaENELDhCQWdDQyJ9