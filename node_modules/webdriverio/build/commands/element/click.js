"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * Click on an element.
 *
 * Note: This issues a WeDdriver `click` command for the selected element, which generally scrolls to and then clicks the
 * selected element. However, if you have fixed-position elements (such as a fixed header or footer) that cover up the
 * selected element after it is scrolled within the viewport, the click will be issued at the given coordinates, but will
 * be received by your fixed (overlaying) element. In these cased the following error is thrown:
 *
 * ```
 * Element is not clickable at point (x, x). Other element would receive the click: ..."
 * ```
 *
 * To work around this, try to find the overlaying element and remove it via `execute` command so it doesn't interfere
 * the click. You also can try to scroll to the element yourself using `scroll` with an offset appropriate for your
 * scenario.
 *
 * <example>
    :example.html
    <button id="myButton" onclick="document.getElementById('someText').innerHTML='I was clicked'">Click me</button>
    <div id="someText">I was not clicked</div>
    :click.js
    it('should demonstrate the click command', () => {
        const myButton = $('#myButton')
        myButton.click()
        const myText = $('#someText')
        const text = myText.getText()
        assert(text === 'I was clicked') // true
    })
    :example.js
    it('should fetch menu links and visit each page', () => {
        const links = $$('#menu a')
        links.forEach((link) => {
            link.click()
        })
    })
 * </example>
 *
 * <example>
    :example.html
    <button id="myButton">Click me</button>
    :example.js
    it('should demonstrate a click using an offset', () => {
        const myButton = $('#myButton')
        myButton.click({ x: 30 }) // clicks 30 horizontal pixels away from location of the button
    })
 * </example>
 *
 * <example>
    :example.html
    <button id="myButton">Click me</button>
    :example.js
    it('should demonstrate a right click passed as string', () => {
        const myButton = $('#myButton')
        myButton.click({ button: 'right' }) // opens the contextmenu at the location of the button
    })
    it('should demonstrate a right click passed as number while adding an offset', () => {
        const myButton = $('#myButton')
        myButton.click({ button: 2, x: 30, y: 40 }) // opens the contextmenu 30 horizontal and 40 vertical pixels away from location of the button
    })
 * </example>
 *
 * @alias element.click
 * @uses protocol/element, protocol/elementIdClick, protocol/performActions, protocol/positionClick
 * @type action
 * @param {ClickOptions=}     options        click options (optional)
 * @param {string= | number=} options.button can be one of [0, "left", 1, "middle", 2, "right"] (optional)
 * @param {number=}           options.x      Number (optional)
 * @param {number=}           options.y      Number (optional)
 */
async function click(options) {
    if (typeof options === 'undefined') {
        return this.elementClick(this.elementId);
    }
    if (typeof options !== 'object' || Array.isArray(options)) {
        throw new TypeError('Options must be an object');
    }
    let { button = 0, x: xoffset = 0, y: yoffset = 0 } = options || {};
    if (typeof xoffset !== 'number'
        || typeof yoffset !== 'number'
        || !Number.isInteger(xoffset)
        || !Number.isInteger(yoffset)) {
        throw new TypeError('Co√∂rdinates must be integers');
    }
    if (button === 'left') {
        button = 0;
    }
    if (button === 'middle') {
        button = 1;
    }
    if (button === 'right') {
        button = 2;
    }
    if (![0, 1, 2].includes(button)) {
        throw new Error('Button type not supported.');
    }
    if (this.isW3C) {
        await this.performActions([{
                type: 'pointer',
                id: 'pointer1',
                parameters: {
                    pointerType: 'mouse'
                },
                actions: [{
                        type: 'pointerMove',
                        origin: this,
                        x: xoffset,
                        y: yoffset
                    }, {
                        type: 'pointerDown',
                        button
                    }, {
                        type: 'pointerUp',
                        button
                    }]
            }]);
        return this.releaseActions();
    }
    const { width, height } = await this.getElementSize(this.elementId);
    await this.moveToElement(this.elementId, xoffset + (width / 2), yoffset + (height / 2));
    return this.positionClick(button);
}
exports.default = click;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvZWxlbWVudC9jbGljay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxRUc7QUFDWSxLQUFLLFVBQVUsS0FBSyxDQUUvQixPQUFzQjtJQUV0QixJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtRQUNoQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0tBQzNDO0lBRUQsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN2RCxNQUFNLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUE7S0FDbkQ7SUFFRCxJQUFJLEVBQ0EsTUFBTSxHQUFHLENBQUMsRUFDVixDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUMsRUFDZCxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUMsRUFDakIsR0FBRyxPQUFPLElBQUksRUFBRSxDQUFBO0lBRWpCLElBQ0ksT0FBTyxPQUFPLEtBQUssUUFBUTtXQUN4QixPQUFPLE9BQU8sS0FBSyxRQUFRO1dBQzNCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7V0FDMUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQy9CLE1BQU0sSUFBSSxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQTtLQUN0RDtJQUVELElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtRQUNuQixNQUFNLEdBQUcsQ0FBQyxDQUFBO0tBQ2I7SUFDRCxJQUFJLE1BQU0sS0FBSyxRQUFRLEVBQUU7UUFDckIsTUFBTSxHQUFHLENBQUMsQ0FBQTtLQUNiO0lBQ0QsSUFBSSxNQUFNLEtBQUssT0FBTyxFQUFFO1FBQ3BCLE1BQU0sR0FBRyxDQUFDLENBQUE7S0FDYjtJQUNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQWdCLENBQUMsRUFBRTtRQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUE7S0FDaEQ7SUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsRUFBRSxFQUFFLFVBQVU7Z0JBQ2QsVUFBVSxFQUFFO29CQUNSLFdBQVcsRUFBRSxPQUFPO2lCQUN2QjtnQkFDRCxPQUFPLEVBQUUsQ0FBQzt3QkFDTixJQUFJLEVBQUUsYUFBYTt3QkFDbkIsTUFBTSxFQUFFLElBQUk7d0JBQ1osQ0FBQyxFQUFFLE9BQU87d0JBQ1YsQ0FBQyxFQUFFLE9BQU87cUJBQ2IsRUFBRTt3QkFDQyxJQUFJLEVBQUUsYUFBYTt3QkFDbkIsTUFBTTtxQkFDVCxFQUFFO3dCQUNDLElBQUksRUFBRSxXQUFXO3dCQUNqQixNQUFNO3FCQUNULENBQUM7YUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVILE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO0tBQy9CO0lBRUQsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ25FLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN2RixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBZ0IsQ0FBQyxDQUFBO0FBQy9DLENBQUM7QUFsRUQsd0JBa0VDIn0=