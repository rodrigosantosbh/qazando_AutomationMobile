"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils");
/**
 *
 * Select option with displayed text matching the argument.
 *
 * <example>
    :example.html
    <select id="selectbox">
        <option value="someValue0">uno</option>
        <option value="someValue1">dos</option>
        <option value="someValue2">tres</option>
        <option value="someValue3">cuatro</option>
        <option value="someValue4">cinco</option>
        <option value="someValue5">seis</option>
    </select>
    :selectByVisibleText.js
    it('demonstrate the selectByVisibleText command', () => {
        const selectBox = $('#selectbox');
        console.log(selectBox.getText('option:checked')); // returns "uno"
        selectBox.selectByVisibleText('cuatro');
        console.log(selectBox.getText('option:checked')); // returns "cuatro"
    })
 * </example>
 *
 * @alias element.selectByVisibleText
 * @param {String|Number} text       text of option element to get selected
 * @uses protocol/findElementsFromElement, protocol/elementClick
 * @type action
 *
 */
async function selectByVisibleText(text) {
    /**
     * convert value into string
     */
    text = typeof text === 'number'
        ? text.toString()
        : text;
    const normalized = text
        .trim() // strip leading and trailing white-space characters
        .replace(/\s+/, ' '); // replace sequences of whitespace characters by a single space
    /**
    * find option element using xpath
    */
    const formatted = /"/.test(normalized)
        ? 'concat("' + normalized.split('"').join('", \'"\', "') + '")'
        : `"${normalized}"`;
    const dotFormat = `[. = ${formatted}]`;
    const spaceFormat = `[normalize-space(text()) = ${formatted}]`;
    const selections = [
        `./option${dotFormat}`,
        `./option${spaceFormat}`,
        `./optgroup/option${dotFormat}`,
        `./optgroup/option${spaceFormat}`,
    ];
    const optionElement = await this.findElementFromElement(this.elementId, 'xpath', selections.join('|'));
    if (optionElement && optionElement.error === 'no such element') {
        throw new Error(`Option with text "${text}" not found.`);
    }
    /**
    * select option
    */
    return this.elementClick(utils_1.getElementFromResponse(optionElement));
}
exports.default = selectByVisibleText;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0QnlWaXNpYmxlVGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L3NlbGVjdEJ5VmlzaWJsZVRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBb0Q7QUFFcEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Qkc7QUFDWSxLQUFLLFVBQVUsbUJBQW1CLENBRTdDLElBQXFCO0lBRXJCOztPQUVHO0lBQ0gsSUFBSSxHQUFHLE9BQU8sSUFBSSxLQUFLLFFBQVE7UUFDM0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDakIsQ0FBQyxDQUFDLElBQUksQ0FBQTtJQUVWLE1BQU0sVUFBVSxHQUFHLElBQUk7U0FDbEIsSUFBSSxFQUFFLENBQUMsb0RBQW9EO1NBQzNELE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUEsQ0FBQywrREFBK0Q7SUFFeEY7O01BRUU7SUFDRixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNsQyxDQUFDLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUk7UUFDL0QsQ0FBQyxDQUFDLElBQUksVUFBVSxHQUFHLENBQUE7SUFDdkIsTUFBTSxTQUFTLEdBQUcsUUFBUSxTQUFTLEdBQUcsQ0FBQTtJQUN0QyxNQUFNLFdBQVcsR0FBRyw4QkFBOEIsU0FBUyxHQUFHLENBQUE7SUFFOUQsTUFBTSxVQUFVLEdBQUc7UUFDZixXQUFXLFNBQVMsRUFBRTtRQUN0QixXQUFXLFdBQVcsRUFBRTtRQUN4QixvQkFBb0IsU0FBUyxFQUFFO1FBQy9CLG9CQUFvQixXQUFXLEVBQUU7S0FDcEMsQ0FBQTtJQUVELE1BQU0sYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV0RyxJQUFJLGFBQWEsSUFBSyxhQUFxQixDQUFDLEtBQUssS0FBSyxpQkFBaUIsRUFBRTtRQUNyRSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixJQUFJLGNBQWMsQ0FBQyxDQUFBO0tBQzNEO0lBRUQ7O01BRUU7SUFDRixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsOEJBQXNCLENBQUMsYUFBYSxDQUFXLENBQUMsQ0FBQTtBQUM3RSxDQUFDO0FBekNELHNDQXlDQyJ9