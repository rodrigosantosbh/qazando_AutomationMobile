"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getElementObject_1 = require("../../utils/getElementObject");
const utils_1 = require("../../utils");
const constants_1 = require("../../constants");
/**
 *
 * The `custom$` allows you to use a custom strategy declared by using `browser.addLocatorStrategy`
 *
 * <example>
    :example.js
    it('should fetch the project title', () => {
        browser.url('https://webdriver.io')
        browser.addLocatorStrategy('myStrat', (selector) => {
            return document.querySelectorAll(selector)
        })

        const header = browser.custom$('myStrat', 'header')
        const projectTitle = header.custom$('myStrat', '.projectTitle')

        console.log(projectTitle.getText()) // WEBDRIVER I/O
    })
 * </example>
 *
 * @alias custom$
 * @param {String} strategyName
 * @param {Any} strategyArguments
 * @return {Element}
 */
async function custom$(strategyName, strategyArguments) {
    const browserObject = utils_1.getBrowserObject(this);
    const strategy = browserObject.strategies.get(strategyName);
    if (!strategy) {
        throw Error('No strategy found for ' + strategyName);
    }
    /**
     * fail if root element is not found, similar to:
     * $('.notExisting').$('.someElem')
     */
    if (!this.elementId) {
        throw Error(`Can't call custom$ on element with selector "${this.selector}" because element wasn't found`);
    }
    let res = await this.execute(strategy, strategyArguments, this);
    /**
     * if the user's script returns multiple elements
     * then we just return the first one as this method
     * is intended to return just one element
     */
    if (Array.isArray(res)) {
        res = res[0];
    }
    if (res && typeof res[constants_1.ELEMENT_KEY] === 'string') {
        return await getElementObject_1.getElement.call(this, strategy, res);
    }
    throw Error('Your locator strategy script must return an element');
}
exports.default = custom$;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tJC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L2N1c3RvbSQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxtRUFBeUQ7QUFDekQsdUNBQThDO0FBQzlDLCtDQUE2QztBQUU3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Qkc7QUFDSCxLQUFLLFVBQVUsT0FBTyxDQUVsQixZQUFvQixFQUNwQixpQkFBeUI7SUFFekIsTUFBTSxhQUFhLEdBQUcsd0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUMsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUErQyxDQUFBO0lBRXpHLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDWCxNQUFNLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLENBQUMsQ0FBQTtLQUN2RDtJQUVEOzs7T0FHRztJQUNILElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2pCLE1BQU0sS0FBSyxDQUFDLGdEQUFnRCxJQUFJLENBQUMsUUFBUSxnQ0FBZ0MsQ0FBQyxDQUFBO0tBQzdHO0lBRUQsSUFBSSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQXdDLENBQUE7SUFFdEc7Ozs7T0FJRztJQUNILElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNwQixHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2Y7SUFFRCxJQUFJLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyx1QkFBVyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQzdDLE9BQU8sTUFBTSw2QkFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0tBQzNEO0lBRUQsTUFBTSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQTtBQUN0RSxDQUFDO0FBRUQsa0JBQWUsT0FBTyxDQUFBIn0=