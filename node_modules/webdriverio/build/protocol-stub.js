"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@wdio/utils");
/**
 * these commands can be used outside test scope and may be used accidentally by user before browser session is started
 */
const WARN_ON_COMMANDS = ['addCommand', 'overwriteCommand'];
/**
 * create `browser` object with capabilities and environment flags before session is started
 * so that Mocha/Jasmine users can filter their specs based on flags or use capabilities in test titles
 */
class ProtocolStub {
    static async newSession(options) {
        const capabilities = emulateSessionCapabilities((options.capabilities || {}));
        const browser = addCommands({
            capabilities,
            ...utils_1.capabilitiesEnvironmentDetector(capabilities, options._automationProtocol || 'webdriver')
        });
        return browser;
    }
    /**
     * added just in case user wants to somehow reload webdriver or devtools session
     * before it was started.
     */
    static reloadSession() {
        throw new Error('Protocol Stub: Make sure to start webdriver or devtools session before reloading it.');
    }
    static attachToSession(options, modifier) {
        if (options || !modifier) {
            return ProtocolStub.newSession(options);
        }
        /**
         * MultiRemote
         */
        return addCommands(modifier({
            commandList: []
        }));
    }
}
exports.default = ProtocolStub;
/**
 * provide better visibility to users that want to add / overwrite commands
 * before session is started
 * @param {object} browser
 */
function addCommands(browser) {
    WARN_ON_COMMANDS.forEach((commandName) => {
        browser[commandName] = commandNotAvailable(commandName);
    });
    return browser;
}
/**
 * transform capabilities provided by user to look like
 * capabilities returned by WebDriver
 * @param   {object} caps user defined capabilities
 * @return  {object}
 */
function emulateSessionCapabilities(caps) {
    const capabilities = {};
    // remove appium vendor prefix from capabilities
    Object.entries(caps).forEach(([key, value]) => {
        const newKey = key.replace('appium:', '');
        capabilities[newKey] = value;
    });
    // isChrome
    if (caps.browserName && caps.browserName.toLowerCase() === 'chrome') {
        capabilities.chrome = true;
    }
    return capabilities;
}
/**
 * warn user to avoid usage of command before browser session is started.
 * @param {string} commandName
 */
function commandNotAvailable(commandName) {
    return () => { throw new Error(`Unable to use '${commandName}' before browser session is started.`); };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2wtc3R1Yi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm90b2NvbC1zdHViLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQTZEO0FBSTdEOztHQUVHO0FBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0FBRTNEOzs7R0FHRztBQUNILE1BQXFCLFlBQVk7SUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUUsT0FBMEI7UUFDL0MsTUFBTSxZQUFZLEdBQUcsMEJBQTBCLENBQzNDLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQWdELENBQzlFLENBQUE7UUFFRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUM7WUFDeEIsWUFBWTtZQUNaLEdBQUcsdUNBQStCLENBQUMsWUFBWSxFQUFHLE9BQWUsQ0FBQyxtQkFBbUIsSUFBSSxXQUFXLENBQUM7U0FDeEcsQ0FBQyxDQUFBO1FBRUYsT0FBTyxPQUFPLENBQUE7SUFDbEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxhQUFhO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0ZBQXNGLENBQUMsQ0FBQTtJQUMzRyxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FDbEIsT0FBc0IsRUFDdEIsUUFBa0M7UUFFbEMsSUFBSSxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDdEIsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQWMsQ0FBQyxDQUFBO1NBQ2pEO1FBRUQ7O1dBRUc7UUFDSCxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUM7WUFDeEIsV0FBVyxFQUFFLEVBQUU7U0FDbEIsQ0FBQyxDQUFDLENBQUE7SUFDUCxDQUFDO0NBQ0o7QUFyQ0QsK0JBcUNDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsV0FBVyxDQUFFLE9BQTRCO0lBQzlDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO1FBQ3JDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUMzRCxDQUFDLENBQUMsQ0FBQTtJQUNGLE9BQU8sT0FBTyxDQUFBO0FBQ2xCLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQVMsMEJBQTBCLENBQUUsSUFBc0M7SUFDdkUsTUFBTSxZQUFZLEdBQXdCLEVBQUUsQ0FBQTtJQUU1QyxnREFBZ0Q7SUFDaEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQzFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ3pDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUE7SUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFFRixXQUFXO0lBQ1gsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxFQUFFO1FBQ2pFLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO0tBQzdCO0lBRUQsT0FBTyxZQUFZLENBQUE7QUFDdkIsQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQVMsbUJBQW1CLENBQUUsV0FBbUI7SUFDN0MsT0FBTyxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixXQUFXLHNDQUFzQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUE7QUFDekcsQ0FBQyJ9