"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.react$$ = exports.react$ = exports.waitToLoadReact = void 0;
exports.waitToLoadReact = function waitToLoadReact() {
    window.resq.waitToLoadReact();
};
exports.react$ = function react$(selector, props, state, reactElement) {
    props = props || {};
    state = state || {};
    let element = window.resq.resq$(selector, reactElement);
    if (Object.keys(props).length) {
        // not yet typed https://github.com/baruchvlz/resq/issues/69
        element = element.byProps(props);
    }
    if (Object.keys(state).length) {
        // not yet typed https://github.com/baruchvlz/resq/issues/69
        element = element.byState(state);
    }
    if (!element.name) {
        return { message: `React element with selector "${selector}" wasn't found` };
    }
    // resq returns an array of HTMLElements if the React component is a fragment
    // if the element is a fragment, we return the first child to be passed into the driver
    return element.isFragment && element.node
        ? element.node[0]
        : element.node;
};
exports.react$$ = function react$$(selector, props, state, reactElement) {
    let elements = window.resq.resq$$(selector, reactElement);
    if (Object.keys(props).length) {
        // not yet typed https://github.com/baruchvlz/resq/issues/69
        elements = elements.byProps(props);
    }
    if (Object.keys(state).length) {
        // not yet typed https://github.com/baruchvlz/resq/issues/69
        elements = elements.byState(state);
    }
    if (!elements.length) {
        return [];
    }
    // resq returns an array of HTMLElements if the React component is a fragment
    // this avoids having nested arrays of nodes which the driver does not understand
    // [[div, div], [div, div]] => [div, div, div, div]
    let nodes = [];
    elements.forEach(element => {
        const { node, isFragment } = element;
        if (isFragment) {
            nodes = nodes.concat(node || []);
        }
        else if (node) {
            nodes.push(node);
        }
    });
    return [...nodes];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3Jlc3EudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUWEsUUFBQSxlQUFlLEdBQUcsU0FBUyxlQUFlO0lBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7QUFDakMsQ0FBQyxDQUFBO0FBRVksUUFBQSxNQUFNLEdBQUcsU0FBUyxNQUFNLENBQ2pDLFFBQWdCLEVBQ2hCLEtBQVksRUFDWixLQUEwQixFQUMxQixZQUF5QjtJQUV6QixLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQTtJQUNuQixLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQTtJQUVuQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFFdkQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUMzQiw0REFBNEQ7UUFDNUQsT0FBTyxHQUFJLE9BQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDNUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQzNCLDREQUE0RDtRQUM1RCxPQUFPLEdBQUksT0FBZSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUM1QztJQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1FBQ2YsT0FBTyxFQUFFLE9BQU8sRUFBRSxnQ0FBZ0MsUUFBUSxnQkFBZ0IsRUFBRSxDQUFBO0tBQy9FO0lBRUQsNkVBQTZFO0lBQzdFLHVGQUF1RjtJQUN2RixPQUFPLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLElBQUk7UUFDckMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxJQUE2QixDQUFDLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQTtBQUN0QixDQUFDLENBQUE7QUFFWSxRQUFBLE9BQU8sR0FBRyxTQUFTLE9BQU8sQ0FDbkMsUUFBZ0IsRUFDaEIsS0FBWSxFQUNaLEtBQTZCLEVBQzdCLFlBQXlCO0lBRXpCLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQTtJQUV6RCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQzNCLDREQUE0RDtRQUM1RCxRQUFRLEdBQUksUUFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDOUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQzNCLDREQUE0RDtRQUM1RCxRQUFRLEdBQUksUUFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDOUM7SUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtRQUNsQixPQUFPLEVBQUUsQ0FBQTtLQUNaO0lBRUQsNkVBQTZFO0lBQzdFLGlGQUFpRjtJQUNqRixtREFBbUQ7SUFDbkQsSUFBSSxLQUFLLEdBQWtCLEVBQUUsQ0FBQTtJQUU3QixRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3ZCLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBRXBDLElBQUksVUFBVSxFQUFFO1lBQ1osS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQ25DO2FBQU0sSUFBSSxJQUFJLEVBQUU7WUFDYixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ25CO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUEifQ==