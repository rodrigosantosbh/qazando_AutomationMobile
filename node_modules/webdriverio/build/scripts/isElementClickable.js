"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * check if element is within the viewport or is overlapped by another element or disabled
 * @param  {HTMLElement} elem  element to check
 * @return {Boolean}           false if element is not overlapped
 */
function isElementClickable(elem) {
    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {
        return false;
    }
    // Edge before switching to Chromium
    const isOldEdge = !!window.StyleMedia;
    // returns true for Chrome and Firefox and false for Safari, Edge and IE
    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);
    // get overlapping element
    function getOverlappingElement(elem, context) {
        context = context || document;
        const elemDimension = elem.getBoundingClientRect();
        const x = elemDimension.left + (elem.clientWidth / 2);
        const y = elemDimension.top + (elem.clientHeight / 2);
        return context.elementFromPoint(x, y);
    }
    // get overlapping element rects (currently only the first)
    // applicable if element's text is multiline.
    function getOverlappingRects(elem, context) {
        context = context || document;
        const elems = [];
        const rects = elem.getClientRects();
        // webdriver clicks on center of the first element's rect (line of text), it might change in future
        const rect = rects[0];
        const x = rect.left + (rect.width / 2);
        const y = rect.top + (rect.height / 2);
        elems.push(context.elementFromPoint(x, y));
        return elems;
    }
    // get overlapping elements
    function getOverlappingElements(elem, context) {
        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));
    }
    // is a node a descendant of a given node
    function nodeContains(elem, otherNode) {
        // Edge doesn't support neither Shadow Dom nor contains if ShadowRoot polyfill is used
        if (isOldEdge) {
            let tmpElement = otherNode;
            while (tmpElement) {
                if (tmpElement === elem) {
                    return true;
                }
                tmpElement = tmpElement.parentNode;
                // DocumentFragment / ShadowRoot polyfill like ShadyRoot
                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {
                    tmpElement = tmpElement.host;
                }
            }
            return false;
        }
        return elem.contains(otherNode);
    }
    // is one of overlapping elements the `elem` or one of its child
    function isOverlappingElementMatch(elementsFromPoint, elem) {
        if (elementsFromPoint.some(function (elementFromPoint) {
            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);
        })) {
            return true;
        }
        // shadow root
        // filter unique elements with shadowRoot
        // @ts-ignore
        let elemsWithShadowRoot = [].concat(elementsFromPoint);
        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {
            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;
        });
        // getOverlappingElements of every element with shadowRoot
        let shadowElementsFromPoint = [];
        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {
            let shadowElement = elemsWithShadowRoot[i];
            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));
        }
        // remove duplicates and parents
        // @ts-ignore
        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);
        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {
            return !elementsFromPoint.includes(x);
        });
        if (shadowElementsFromPoint.length === 0) {
            return false;
        }
        return isOverlappingElementMatch(shadowElementsFromPoint, elem);
    }
    // copied from `isElementInViewport.js`
    function isElementInViewport(elem) {
        if (!elem.getBoundingClientRect) {
            return false;
        }
        const rect = elem.getBoundingClientRect();
        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);
        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);
        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);
        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);
        return (vertInView && horInView);
    }
    function isClickable(elem) {
        return (isElementInViewport(elem) && elem.disabled !== true &&
            isOverlappingElementMatch(getOverlappingElements(elem), elem));
    }
    // scroll to the element if it's not clickable
    if (!isClickable(elem)) {
        // works well in dialogs, but the element may be still overlapped by some sticky header/footer
        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);
        // if element is still not clickable take another scroll attempt
        if (!isClickable(elem)) {
            // scroll to element, try put it in the screen center.
            // Should definitely work even if element was covered with sticky header/footer
            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);
            return isClickable(elem);
        }
    }
    return true;
}
exports.default = isElementClickable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFbGVtZW50Q2xpY2thYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaXNFbGVtZW50Q2xpY2thYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7R0FJRztBQUNILFNBQXdCLGtCQUFrQixDQUFFLElBQWlCO0lBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDN0gsT0FBTyxLQUFLLENBQUE7S0FDZjtJQUVELG9DQUFvQztJQUNwQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQTtJQUNyQyx3RUFBd0U7SUFDeEUsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLENBQUUsTUFBYyxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQTtJQUV4RSwwQkFBMEI7SUFDMUIsU0FBUyxxQkFBcUIsQ0FBRSxJQUFpQixFQUFFLE9BQWtCO1FBQ2pFLE9BQU8sR0FBRyxPQUFPLElBQUksUUFBUSxDQUFBO1FBQzdCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ3JELE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ3JELE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQsMkRBQTJEO0lBQzNELDZDQUE2QztJQUM3QyxTQUFTLG1CQUFt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