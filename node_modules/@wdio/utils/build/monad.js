"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const logger_1 = __importDefault(require("@wdio/logger"));
const utils_1 = require("./utils");
const SCOPE_TYPES = {
    browser: /* istanbul ignore next */ function Browser() { },
    element: /* istanbul ignore next */ function Element() { }
};
function WebDriver(options, modifier, propertiesObject = {}) {
    var _a;
    /**
     * In order to allow named scopes for elements we have to propagate that
     * info within the `propertiesObject` object. This doesn't have any functional
     * advantages just provides better description of objects when debugging them
     */
    const scopeType = SCOPE_TYPES[((_a = propertiesObject.scope) === null || _a === void 0 ? void 0 : _a.value) || 'browser'];
    delete propertiesObject.scope;
    const prototype = Object.create(scopeType.prototype);
    const log = logger_1.default('webdriver');
    const eventHandler = new events_1.EventEmitter();
    const EVENTHANDLER_FUNCTIONS = Object.getPrototypeOf(eventHandler);
    /**
     * WebDriver monad
     */
    function unit(sessionId, commandWrapper) {
        /**
         * capabilities attached to the instance prototype not being shown if
         * logging the instance
         */
        propertiesObject.commandList = { value: Object.keys(propertiesObject) };
        propertiesObject.options = { value: options };
        propertiesObject.requestedCapabilities = { value: options.requestedCapabilities };
        /**
         * allow to wrap commands if necessary
         * e.g. in wdio-cli to make them synchronous
         */
        if (typeof commandWrapper === 'function') {
            for (const [commandName, { value }] of Object.entries(propertiesObject)) {
                if (typeof value !== 'function') {
                    continue;
                }
                propertiesObject[commandName].value = commandWrapper(commandName, value);
                propertiesObject[commandName].configurable = true;
            }
        }
        /**
         * overwrite native element commands with user defined
         */
        utils_1.overwriteElementCommands.call(this, propertiesObject);
        /**
         * assign propertiesObject to itself so the client can be recreated
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { puppeteer, ...propertiesObjectWithoutPuppeteer } = propertiesObject;
        propertiesObject['__propertiesObject__'] = { value: propertiesObjectWithoutPuppeteer };
        let client = Object.create(prototype, propertiesObject);
        client.sessionId = sessionId;
        /**
         * register capabilities only to browser scope
         */
        if (scopeType.name === 'Browser') {
            client.capabilities = options.capabilities;
        }
        if (typeof modifier === 'function') {
            client = modifier(client, options);
        }
        client.addCommand = function (name, func, attachToElement = false, proto, instances) {
            const customCommand = typeof commandWrapper === 'function'
                ? commandWrapper(name, func)
                : func;
            if (attachToElement) {
                /**
                 * add command to every multiremote instance
                 */
                if (instances) {
                    Object.values(instances).forEach(instance => {
                        instance.__propertiesObject__[name] = {
                            value: customCommand
                        };
                    });
                }
                this.__propertiesObject__[name] = { value: customCommand };
            }
            else {
                unit.lift(name, customCommand, proto);
            }
        };
        /**
         * overwriteCommand
         * @param  {String}   name              command name to be overwritten
         * @param  {Function} func              function to replace original command with;
         *                                      takes original function as first argument.
         * @param  {boolean=} attachToElement   overwrite browser command (false) or element command (true)
         * @param  {Object=}  proto             prototype to add function to (optional)
         * @param  {Object=}  instances         multiremote instances
         */
        client.overwriteCommand = function (name, func, attachToElement = false, proto, instances) {
            let customCommand = typeof commandWrapper === 'function'
                ? commandWrapper(name, func)
                : func;
            if (attachToElement) {
                if (instances) {
                    /**
                     * add command to every multiremote instance
                     */
                    Object.values(instances).forEach(instance => {
                        instance.__propertiesObject__.__elementOverrides__.value[name] = customCommand;
                    });
                }
                else {
                    /**
                     * regular mode
                     */
                    this.__propertiesObject__.__elementOverrides__.value[name] = customCommand;
                }
            }
            else if (client[name]) {
                const origCommand = client[name];
                delete client[name];
                unit.lift(name, customCommand, proto, (...args) => origCommand.apply(this, args));
            }
            else {
                throw new Error('overwriteCommand: no command to be overwritten: ' + name);
            }
        };
        return client;
    }
    /**
     * Enhance monad prototype with function
     * @param  {String}   name          name of function to attach to prototype
     * @param  {Function} func          function to be added to prototype
     * @param  {Object}   proto         prototype to add function to (optional)
     * @param  {Function} origCommand   original command to be passed to custom command as first argument
     */
    unit.lift = function (name, func, proto, origCommand) {
        (proto || prototype)[name] = function next(...args) {
            log.info('COMMAND', utils_1.commandCallStructure(name, args));
            /**
             * set name of function for better error stack
             */
            Object.defineProperty(func, 'name', {
                value: name,
                writable: false,
            });
            const result = func.apply(this, origCommand ? [origCommand, ...args] : args);
            /**
             * always transform result into promise as we don't know whether or not
             * the user is running tests with wdio-sync or not
             */
            Promise.resolve(result).then((res) => {
                log.info('RESULT', res);
                this.emit('result', { name, result: res });
            }).catch(() => { });
            return result;
        };
    };
    /**
     * register event emitter
     */
    for (let eventCommand in EVENTHANDLER_FUNCTIONS) {
        prototype[eventCommand] = function (...args) {
            eventHandler[eventCommand](...args);
            return this;
        };
    }
    return unit;
}
exports.default = WebDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW9uYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxtQ0FBcUM7QUFDckMsMERBQWlDO0FBRWpDLG1DQUF3RTtBQUV4RSxNQUFNLFdBQVcsR0FBNkI7SUFDMUMsT0FBTyxFQUFFLDBCQUEwQixDQUFDLFNBQVMsT0FBTyxLQUFLLENBQUM7SUFDMUQsT0FBTyxFQUFFLDBCQUEwQixDQUFDLFNBQVMsT0FBTyxLQUFLLENBQUM7Q0FDN0QsQ0FBQTtBQU1ELFNBQXdCLFNBQVMsQ0FBRSxPQUE0QixFQUFFLFFBQW1CLEVBQUUsbUJBQXFDLEVBQUU7O0lBQ3pIOzs7O09BSUc7SUFDSCxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsT0FBQSxnQkFBZ0IsQ0FBQyxLQUFLLDBDQUFFLEtBQUssS0FBSSxTQUFTLENBQUMsQ0FBQTtJQUN6RSxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQTtJQUU3QixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNwRCxNQUFNLEdBQUcsR0FBRyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRS9CLE1BQU0sWUFBWSxHQUFHLElBQUkscUJBQVksRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUVsRTs7T0FFRztJQUNILFNBQVMsSUFBSSxDQUFjLFNBQWlCLEVBQUUsY0FBeUI7UUFDbkU7OztXQUdHO1FBQ0gsZ0JBQWdCLENBQUMsV0FBVyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFBO1FBQ3ZFLGdCQUFnQixDQUFDLE9BQU8sR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQTtRQUM3QyxnQkFBZ0IsQ0FBQyxxQkFBcUIs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