"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialiseWorkerService = exports.initialiseLauncherService = void 0;
const logger_1 = __importDefault(require("@wdio/logger"));
const initialisePlugin_1 = __importDefault(require("./initialisePlugin"));
const log = logger_1.default('@wdio/utils:initialiseServices');
/**
 * Maps list of services of a config file into a list of actionable objects
 * @param  {Object}    config            config of running session
 * @param  {Object}    caps              capabilities of running session
 * @return {[(Object|Class), Object][]}  list of services with their config objects
 */
function initialiseServices(services) {
    const initialisedServices = [];
    for (let [serviceName, serviceConfig = {}] of services) {
        /**
         * allow custom services that are already initialised, e.g.
         *
         * ```
         * services: [
         *     [{ beforeTest: () => { ... } }]
         * ]
         * ```
         */
        if (typeof serviceName === 'object') {
            log.debug('initialise custom initiated service');
            initialisedServices.push([serviceName, {}]);
            continue;
        }
        /**
         * allow custom service classes, e.g.
         *
         * ```
         * class MyService { ... }
         * ```
         *
         * in wdio.conf.js:
         *
         * ```
         * services: [MyService]
         * ```
         */
        if (typeof serviceName === 'function') {
            log.debug(`initialise custom service "${serviceName.name}"`);
            initialisedServices.push([serviceName, serviceConfig]);
            continue;
        }
        /**
         * services as NPM packages
         *
         * ```
         * services: ['@wdio/devtools-service']
         * ```
         */
        log.debug(`initialise service "${serviceName}" as NPM package`);
        const service = initialisePlugin_1.default(serviceName, 'service');
        initialisedServices.push([service, serviceConfig, serviceName]);
    }
    return initialisedServices;
}
/**
 * formats service array into proper structure which is an array with
 * the service object as first parameter and the service option as
 * second parameter
 * @param  {[Any]} service               list of services from config file
 * @return {[service, serviceConfig][]}  formatted list of services
 */
function sanitizeServiceArray(service) {
    return Array.isArray(service) ? service : [service, {}];
}
/**
 * initialise service for launcher process
 * @param  {Object}   config  wdio config
 * @param  {Object[]} caps    list of capabilities
 * @return {Object}           containing a list of launcher services as well
 *                            as a list of services that don't need to be
 *                            required in the worker
 */
function initialiseLauncherService(config, caps) {
    const ignoredWorkerServices = [];
    const launcherServices = [];
    try {
        const services = initialiseServices(config.services.map(sanitizeServiceArray));
        for (const [service, serviceConfig, serviceName] of services) {
            /**
             * add custom services as object or function
             */
            if (typeof service === 'object' && !serviceName) {
                launcherServices.push(service);
                continue;
            }
            /**
             * add class service from imported package
             */
            const Launcher = service.launcher;
            if (typeof Launcher === 'function' && serviceName) {
                launcherServices.push(new Launcher(serviceConfig, caps, config));
            }
            /**
             * add class service from passed in class
             */
            if (typeof service === 'function' && !serviceName) {
                launcherServices.push(new service(serviceConfig, caps, config));
            }
            /**
             * check if service has a default export
             */
            if (serviceName &&
                typeof service.default !== 'function' &&
                typeof service !== 'function') {
                ignoredWorkerServices.push(serviceName);
            }
        }
    }
    catch (err) {
        /**
         * don't break if service can't be initiated
         */
        log.error(err);
    }
    return { ignoredWorkerServices, launcherServices };
}
exports.initialiseLauncherService = initialiseLauncherService;
/**
 * initialise services for worker instance
 * @param  {Object} config                 wdio config
 * @param  {Object} caps                   worker capabilities
 * @param  {[type]} ignoredWorkerServices  list of services that don't need to be required in a worker
 *                                         as they don't export a service for it
 * @return {Object[]}                      list if worker initiated worker services
 */
function initialiseWorkerService(config, caps, ignoredWorkerServices = []) {
    const workerServices = config.services
        .map(sanitizeServiceArray)
        .filter(([serviceName]) => !ignoredWorkerServices.includes(serviceName));
    try {
        const services = initialiseServices(workerServices);
        return services.map(([service, serviceConfig, serviceName]) => {
            /**
             * add object service
             */
            if (typeof service === 'object' && !serviceName) {
                return service;
            }
            const Service = service.default || service;
            if (typeof Service === 'function') {
                return new Service(serviceConfig, caps, config);
            }
        }).filter((service) => Boolean(service));
    }
    catch (err) {
        /**
         * don't break if service can't be initiated
         */
        log.error(err);
        return [];
    }
}
exports.initialiseWorkerService = initialiseWorkerService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGlzZVNlcnZpY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2luaXRpYWxpc2VTZXJ2aWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSwwREFBaUM7QUFFakMsMEVBQWlEO0FBRWpELE1BQU0sR0FBRyxHQUFHLGdCQUFNLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtBQVdwRDs7Ozs7R0FLRztBQUNILFNBQVMsa0JBQWtCLENBQUUsUUFBOEI7SUFDdkQsTUFBTSxtQkFBbUIsR0FBd0IsRUFBRSxDQUFBO0lBQ25ELEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRSxhQUFhLEdBQUcsRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFO1FBQ3BEOzs7Ozs7OztXQVFHO1FBQ0gsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7WUFDakMsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFBO1lBQ2hELG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLFdBQXFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUNyRSxTQUFRO1NBQ1g7UUFFRDs7Ozs7Ozs7Ozs7O1dBWUc7UUFDSCxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsRUFBRTtZQUNuQyxHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtZQUM1RCxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFvQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUE7WUFDL0UsU0FBUTtTQUNYO1FBRUQ7Ozs7OztXQU1HO1FBQ0gsR0FBRyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsV0FBVyxrQkFBa0IsQ0FBQyxDQUFBO1FBQy9ELE1BQU0sT0FBTyxHQUFHLDBCQUFnQixDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUN4RCxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFnQyxFQUFFLGFBQWEs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